import time
import os
import numpy as np
import ctypes

from collections import Counter
from pyscf import lib, gto
from pyscf.geomopt.geometric_solver import optimize
from gpu4pyscf import dft
# from mpi4pyscf import dft

from Compound_Properties import get_spin
from External_Saving import save_xyz, save_optimised_coords

_loaderpath = 'libdftd3-master/lib'
libdftd3 = np.ctypeslib.load_library('libdftd3.so', _loaderpath)

init_guess = ['hcore', 'minao', 'atom']

bases = ['6-31G', 'STO-6G', 'def2-svp', 'aug-cc-pVDZ']
density_fit_bases = ['weigend', 'def2-svp']

wrapper_xe_funcs = ['b3-lyp', 'pbe', 'b97-d', 'SVWN', 'b-lyp']
select_wrap_xe = 1


def dftd3_wrapper(mf, mol):
    """
        Takes a setup molecule system and calculates total energy whilst taking into account
        attractive and repulsive forces.

        :param mf: Mean-field object.
        :param mol: Molecule system.
        :return: System energy and forces.
    """

    coords = mol.atom_coords()
    itype = np.zeros(mol.natm, dtype=np.int32)
    for ia in range(mol.natm):
        symb = mol.atom_pure_symbol(ia)
        itype[ia] = lib.parameters.NUC[symb]

    func = wrapper_xe_funcs[select_wrap_xe].encode()

    version = 4
    tz = 0
    edisp = np.zeros(1)
    grad = np.zeros((mol.natm, 3))

    libdftd3.wrapper(
        ctypes.c_int(mol.natm),
        coords.ctypes.data_as(ctypes.c_void_p),
        itype.ctypes.data_as(ctypes.c_void_p),
        ctypes.c_char_p(func),
        ctypes.c_int(version),
        ctypes.c_int(tz),
        edisp.ctypes.data_as(ctypes.c_void_p),
        grad.ctypes.data_as(ctypes.c_void_p),
    )                                                                                                                   # Call the libdftd3 wrapper.

    energy_with_dispersion = (mf.kernel() + edisp[0]) * 27.2114                                                         # Add dispersion correction to the SCF energy (in eV).

    forces = -grad * 27.2114                                                                                            # Convert to eV/Angstrom.

    return energy_with_dispersion, forces


def calculate_energy(atoms):
    """
        Takes in the XYZ format of the 3D coordinates of the material and computes
        the total energy.

        :param atoms: 3D coordinates of a material.
        :return: The total energy in eV.
    """

    symbols = [line.split()[0] for line in atoms]
    element_count = [(atom, str(count)) for atom, count in Counter(symbols).items()]

    mol = gto.M(
        verbose=5,
        atom=atoms,
        basis='STO-6G',
        unit='Angstrom',
        spin=get_spin(element_count)
    )                                                                                                                   # Define the molecule in PySCF.

    start_time = time.time()

    mf = dft.RKS(mol).density_fit(auxbasis='def2-svp')
    mf.conv_tol = 1e-4
    mf.level_shift = 0.5

    mf.xc = 'pbe'
    mf.init_guess = 'atom'
    mf.disp = 'd3bj'

    mf.direct_scf = True
    mf.diis = True
    mf.with_df._cderi_to_disk = True# Use DIIS for SCF convergence acceleration.                                                                                           # Use the 'dftd3' engine.

    # corrected_energy, _ = dftd3_wrapper(mf, mol)                                                                           # Call the dftd3 function.

    corrected_energy = mf.kernel() * 27.2114

    end_time = time.time()

    print("Total time taken for energy calculation: ", end_time - start_time)

    return corrected_energy


def optimise_geometry(atoms, num_fixed, name):
    """
    Perform the geometry optimization with rigid body constraints for the first `num_fixed` atoms.
    """

    symbols = [line.split()[0] for line in atoms]
    element_count = [(atom, str(count)) for atom, count in Counter(symbols).items()]

    mol = gto.M(
        verbose=5,
        atom=atoms,
        basis='STO-6G',
        unit='Angstrom',
        spin=get_spin(element_count)
    )

    mf = dft.RKS(mol).density_fit(auxbasis='def2-svp')

    mf.direct_scf = True
    mf.diis = True
    mf.with_df._cderi_to_disk = True

    mf.xc = 'pbe'
    mf.init_guess = 'atom'
    mf.disp = 'd3bj'

    mf.grids.level = 4
    mf.level_shift = 0.5
    mf.conv_tol = 1e-4

    def write_constraints(num_fixed, name):
        os.makedirs("Constraints", exist_ok=True)  # Ensure folder exists
        filename = f"Constraints/constraints_{name}.txt"

        with open(filename, "w") as f:
            f.write("$freeze\n")
            f.write(f"rotation 1-{num_fixed}\n")  # Freezes rotation

            for i in range(1, num_fixed + 1):
                for j in range(i + 1, num_fixed + 1):  # Avoid repeating pairs (i, j) and (j, i)
                    f.write(f"distance {i} {j}\n")

        return filename

    constraint_path = write_constraints(num_fixed, name)

    params = {
        "constraints": constraint_path,
        "convergence_energy": 5e-1,
        "other": ["--rigid", "yes", "--conmethod", "1"]
    }

    start_time = time.time()

    opt = optimize(mf, **params)
    optimized_coords = opt.atom_coords()

    end_time = time.time()

    print('Optimisation time: ', end_time - start_time)

    atom_symbols = [atom[0] for atom in opt._atom]

    ANGSTROM_TO_BOHR = 1/1.8897259886
    optimized_coords_bohr = np.array(optimized_coords) * ANGSTROM_TO_BOHR

    optimized_atoms = [
        f"{symbol} {x:.6f} {y:.6f} {z:.6f}"
        for symbol, (x, y, z) in zip(atom_symbols, optimized_coords_bohr)
    ]

    save_optimised_coords(optimized_coords_bohr, f'Optimised Coordinates/{name}_optimised_csv')
    save_xyz(atom_symbols, optimized_coords_bohr,f"Optimised Coordinates/{name}_optimised_coords")

    return optimized_atoms


# num_atoms = 63
# compound = 'TiO2-A'
# coords = ['Ti 0.0000000000 0.0000000000 0.0000000002', 'Ti 0.0000000000 -1.8912698030 2.4037554262', 'Ti 0.0000000000 1.8912698030 2.4037554262', 'Ti -1.8912698030 -1.8912698030 -4.8075108528', 'Ti -1.8912698030 -1.8912698030 4.8075108532', 'Ti -1.8912698030 1.8912698030 -4.8075108528', 'Ti -1.8912698030 1.8912698030 4.8075108532', 'Ti 1.8912698030 -1.8912698030 -4.8075108528', 'Ti 1.8912698030 -1.8912698030 4.8075108532', 'Ti 1.8912698030 1.8912698030 -4.8075108528', 'Ti 1.8912698030 1.8912698030 4.8075108532', 'Ti -1.8912698030 0.0000000000 -2.4037554268', 'Ti 1.8912698030 0.0000000000 -2.4037554268', 'O -1.8912698030 0.0000000000 -0.4119832958', 'O 1.8912698030 0.0000000000 -0.4119832958', 'O 0.0000000000 0.0000000000 1.9917721302', 'O 0.0000000000 -1.8912698030 0.4119832962', 'O 0.0000000000 1.8912698030 0.4119832962', 'O -1.8912698030 -1.8912698030 2.8157387222', 'O -1.8912698030 1.8912698030 2.8157387222', 'O 1.8912698030 -1.8912698030 2.8157387222', 'O 1.8912698030 1.8912698030 2.8157387222', 'O 0.0000000000 -1.8912698030 4.3955275562', 'O 0.0000000000 1.8912698030 4.3955275562', 'O -1.8912698030 -1.8912698030 -2.8157387228', 'O -1.8912698030 1.8912698030 -2.8157387228', 'O 1.8912698030 -1.8912698030 -2.8157387228', 'O 1.8912698030 1.8912698030 -2.8157387228', 'O -1.8912698030 0.0000000000 -4.3955275568', 'O 1.8912698030 0.0000000000 -4.3955275568', 'O 0.0000000000 0.0000000000 -1.9917721298', 'O 0.0000000000 -3.7825396060 1.9917721302', 'O 0.0000000000 3.7825396060 1.9917721302', 'O -3.7825396060 -1.8912698030 -5.2194941488', 'O -1.8912698030 -3.7825396060 -4.3955275568', 'O -1.8912698030 -1.8912698030 -6.7992829828', 'O 0.0000000000 -1.8912698030 -5.2194941488', 'O -3.7825396060 -1.8912698030 4.3955275562', 'O -1.8912698030 -3.7825396060 5.2194941492', 'O -1.8912698030 -1.8912698030 6.7992829832', 'O -1.8912698030 0.0000000000 5.2194941492', 'O -3.7825396060 1.8912698030 -5.2194941488', 'O -1.8912698030 1.8912698030 -6.7992829828', 'O -1.8912698030 3.7825396060 -4.3955275568', 'O 0.0000000000 1.8912698030 -5.2194941488', 'O -3.7825396060 1.8912698030 4.3955275562', 'O -1.8912698030 1.8912698030 6.7992829832', 'O -1.8912698030 3.7825396060 5.2194941492', 'O 1.8912698030 -3.7825396060 -4.3955275568', 'O 1.8912698030 -1.8912698030 -6.7992829828', 'O 3.7825396060 -1.8912698030 -5.2194941488', 'O 1.8912698030 -3.7825396060 5.2194941492', 'O 1.8912698030 -1.8912698030 6.7992829832', 'O 1.8912698030 0.0000000000 5.2194941492', 'O 3.7825396060 -1.8912698030 4.3955275562', 'O 1.8912698030 1.8912698030 -6.7992829828', 'O 1.8912698030 3.7825396060 -4.3955275568', 'O 3.7825396060 1.8912698030 -5.2194941488', 'O 1.8912698030 1.8912698030 6.7992829832', 'O 1.8912698030 3.7825396060 5.2194941492', 'O 3.7825396060 1.8912698030 4.3955275562', 'O -3.7825396060 0.0000000000 -1.9917721298', 'O 3.7825396060 0.0000000000 -1.9917721298', 'H 3.2987979595 2.7074108767 5.6937699773', 'H 2.7919819949 3.0243402422 6.0731871030', 'H -2.9942296175 3.7352120481 -6.0371396807', 'H -3.3111589830 3.2283960834 -6.4165568063', 'H -3.1289880900 -3.0700756895 5.6066579079', 'H -2.9617918644 -2.6616754295 6.1602991724', 'H -3.4672171994 -3.3541306416 -6.1263950571', 'H -2.8381714011 -3.6094774899 -6.3273014299', 'H -2.7919819949 3.0243402422 6.0731871030', 'H -3.2987979595 2.7074108767 5.6937699773', 'H 2.9942296175 3.7352120481 -6.0371396807', 'H 3.3111589830 3.2283960834 -6.4165568063', 'H 3.1803984587 -2.9177165529 -5.7830253538', 'H 2.5513526604 -3.1730634013 -5.9839317265', 'H 3.3541306418 -3.4672171993 6.1263950571', 'H 3.6094774901 -2.8381714009 6.3273014297', 'H -2.7748619468 0.8236588835 -7.0384422251', 'H -3.2301403199 0.4371876519 -6.6581455118', 'H -3.8059586000 -0.4371876519 -6.9915185835', 'H -4.2612369731 -0.8236588835 -6.6112218702', 'H -2.8095400884 3.9249294924 -1.5530389461', 'H -3.2945062248 3.4399633560 -1.3773127582', 'H -3.8819050943 3.7364479630 1.3773127583', 'H -4.3668712307 3.2514818266 1.5530389461', 'H -0.3009980212 4.5325396060 -1.0609247698', 'H -0.9598485141 4.5325396060 -1.3201158731', 'H 0.9598485141 5.1575396060 2.1440824655', 'H 0.3009980212 5.1575396060 1.8848913622', 'H 2.9783275735 3.7561420073 -1.8034862452', 'H 3.1257187396 3.6087508412 -1.1268654590', 'H 3.8819050943 3.7364479630 1.3773127583', 'H 4.3668712307 3.2514818266 1.5530389461', 'H -4.5325396060 -0.3009980212 -1.8848913622', 'H -4.5325396060 -0.9598485141 -2.1440824654', 'H -5.1575396060 0.9598485141 1.3201158728', 'H -5.1575396060 0.3009980212 1.0609247696', 'H -3.4429691664 -3.2915004144 -1.6367911677', 'H -3.9219236820 -2.8125458987 -1.8428715985', 'H -3.2544876370 -4.3638654203 1.8428715983', 'H -3.7334421526 -3.8849109047 1.6367911675', 'H -0.9598485141 -4.5325396060 2.1440824655', 'H -0.3009980212 -4.5325396060 1.8848913622', 'H 0.3009980212 -5.1575396060 -1.0609247698', 'H 0.9598485141 -5.1575396060 -1.3201158731', 'H -3.9117561788 0.8530068119 5.4442058766', 'H -3.5713331432 0.4078397234 5.8768748264', 'H -3.7725231801 -0.4078397234 6.6319251742', 'H -3.4321001444 -0.8530068119 7.0645941240', 'H -0.2764232677 3.6329244010 6.3216975909', 'H -0.9844232677 3.6329244010 6.3216975909', 'H 0.6304232677 3.1314879376 7.5549079109', 'H 0.6304232677 3.6748611001 7.1010250997', 'H 0.2764232677 3.7415446609 -5.6605403519', 'H 0.9844232677 3.7415446609 -5.6605403519', 'H -0.6304232677 3.3834164765 -7.1264698175', 'H -0.6304232677 3.8212068477 -6.5700494810', 'H 4.5325396060 0.3009980212 1.0609247696', 'H 4.5325396060 0.9598485141 1.3201158728', 'H 5.1575396060 -0.9598485141 -2.1440824654', 'H 5.1575396060 -0.3009980212 -1.8848913622', 'H 3.1257187397 -3.6087508411 2.0781417759', 'H 2.9783275734 -3.7561420073 1.4015209898', 'H 3.8849109047 -3.7334421526 -1.6367911677', 'H 4.3638654203 -3.2544876370 -1.8428715985', 'H 3.4052852145 -0.4371876519 -6.5118459471', 'H 3.8605635875 -0.8236588835 -6.1315492338', 'H 3.1314879376 0.6304232677 -7.5549079105', 'H 3.6748611001 0.6304232677 -7.1010250993', 'H -0.6304232677 -0.9844232677 -7.5492829828', 'H -0.6304232677 -0.2764232677 -7.5492829828', 'H 0.2764232677 0.6304232677 -8.1742829828', 'H 0.9844232677 0.6304232677 -8.1742829828', 'H 0.8530068119 -3.9117561788 -5.4442058770', 'H 0.4078397234 -3.5713331430 -5.8768748268', 'H -0.4078397234 -3.7725231799 -6.6319251744', 'H -0.8530068119 -3.4321001442 -7.0645941241', 'H 3.7415446610 -0.9844232677 5.6605403515', 'H 3.7415446610 -0.2764232677 5.6605403515', 'H 3.8212068478 0.6304232677 6.5700494808', 'H 3.3834164767 0.6304232677 7.1264698174', 'H -0.3801074671 -0.3801074671 7.5492829832', 'H -0.8807390682 -0.8807390682 7.5492829832', 'H 0.8807390682 0.8807390682 8.1742829832', 'H 0.3801074671 0.3801074671 8.1742829832', 'H 0.2764232677 -3.6329244010 6.3216975909', 'H 0.9844232677 -3.6329244010 6.3216975909', 'H -0.8236588835 -3.1755353324 7.5181148619', 'H -0.4371876519 -3.6308137054 7.1378181486']

compound = 'Li4H4-Trial'
coords = ['Li -1.0043096959 1.0043096959 1.0043096959', 'Li -1.0043096959 -1.0043096959 -1.0043096959', 'Li 1.0043096959 -1.0043096959 1.0043096959', 'Li 1.0043096959 1.0043096959 -1.0043096959', 'H -1.0043096959 -1.0043096959 1.0043096959', 'H -1.0043096959 1.0043096959 -1.0043096959', 'H 1.0043096959 1.0043096959 1.0043096959', 'H 1.0043096959 -1.0043096959 -1.0043096959', 'H -0.5850856992 -1.7543096959 -0.5850856992', 'H -0.0844540981 -1.7543096959 -0.0844540981', 'H 0.0844540981 -2.3793096959 0.0844540981', 'H 0.5850856992 -2.3793096959 0.5850856992', 'H 0.0844540981 -0.0844540981 1.7543096959', 'H 0.5850856992 -0.5850856992 1.7543096959', 'H -0.5850856992 0.5850856992 2.3793096959', 'H -0.0844540981 0.0844540981 2.3793096959', 'H 1.7543096959 -0.5850856992 0.5850856992', 'H 1.7543096959 -0.0844540981 0.0844540981', 'H 2.3793096959 0.0844540981 -0.0844540981', 'H 2.3793096959 0.5850856992 -0.5850856992', 'H -1.7543096959 -0.5850856992 -0.5850856992', 'H -1.7543096959 -0.0844540981 -0.0844540981', 'H -2.3793096959 0.0844540981 0.0844540981', 'H -2.3793096959 0.5850856992 0.5850856992', 'H -0.5850856992 1.7543096959 0.5850856992', 'H -0.0844540981 1.7543096959 0.0844540981', 'H 0.0844540981 2.3793096959 -0.0844540981', 'H 0.5850856992 2.3793096959 -0.5850856992', 'H -0.0844540981 -0.0844540981 -1.7543096959', 'H -0.5850856992 -0.5850856992 -1.7543096959', 'H 0.5850856992 0.5850856992 -2.3793096959', 'H 0.0844540981 0.0844540981 -2.3793096959']
num_atoms = 8

# energy = calculate_energy(coords)
# print('System energy: ', energy)

opt_coords = optimise_geometry(coords, compound, num_atoms)
print('Optimised Coordinates: ', opt_coords)

